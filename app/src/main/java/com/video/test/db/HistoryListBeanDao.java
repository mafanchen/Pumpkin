package com.video.test.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.video.test.javabean.HistoryListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HISTORY_LIST_BEAN".
*/
public class HistoryListBeanDao extends AbstractDao<HistoryListBean, Void> {

    public static final String TABLENAME = "HISTORY_LIST_BEAN";

    /**
     * Properties of entity HistoryListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Vod_id = new Property(0, String.class, "vod_id", false, "VOD_ID");
        public final static Property Vod_name = new Property(1, String.class, "vod_name", false, "VOD_NAME");
        public final static Property Vod_pic = new Property(2, String.class, "vod_pic", false, "VOD_PIC");
        public final static Property Play_title = new Property(3, String.class, "play_title", false, "PLAY_TITLE");
        public final static Property Play_url = new Property(4, String.class, "play_url", false, "PLAY_URL");
        public final static Property Play_degree = new Property(5, String.class, "play_degree", false, "PLAY_DEGREE");
        public final static Property Nowtime = new Property(6, String.class, "nowtime", false, "NOWTIME");
        public final static Property Totaltime = new Property(7, String.class, "totaltime", false, "TOTALTIME");
    }


    public HistoryListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HistoryListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HISTORY_LIST_BEAN\" (" + //
                "\"VOD_ID\" TEXT UNIQUE ," + // 0: vod_id
                "\"VOD_NAME\" TEXT," + // 1: vod_name
                "\"VOD_PIC\" TEXT," + // 2: vod_pic
                "\"PLAY_TITLE\" TEXT," + // 3: play_title
                "\"PLAY_URL\" TEXT," + // 4: play_url
                "\"PLAY_DEGREE\" TEXT," + // 5: play_degree
                "\"NOWTIME\" TEXT," + // 6: nowtime
                "\"TOTALTIME\" TEXT);"); // 7: totaltime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HISTORY_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HistoryListBean entity) {
        stmt.clearBindings();
 
        String vod_id = entity.getVod_id();
        if (vod_id != null) {
            stmt.bindString(1, vod_id);
        }
 
        String vod_name = entity.getVod_name();
        if (vod_name != null) {
            stmt.bindString(2, vod_name);
        }
 
        String vod_pic = entity.getVod_pic();
        if (vod_pic != null) {
            stmt.bindString(3, vod_pic);
        }
 
        String play_title = entity.getPlay_title();
        if (play_title != null) {
            stmt.bindString(4, play_title);
        }
 
        String play_url = entity.getPlay_url();
        if (play_url != null) {
            stmt.bindString(5, play_url);
        }
 
        String play_degree = entity.getPlay_degree();
        if (play_degree != null) {
            stmt.bindString(6, play_degree);
        }
 
        String nowtime = entity.getNowtime();
        if (nowtime != null) {
            stmt.bindString(7, nowtime);
        }
 
        String totaltime = entity.getTotaltime();
        if (totaltime != null) {
            stmt.bindString(8, totaltime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HistoryListBean entity) {
        stmt.clearBindings();
 
        String vod_id = entity.getVod_id();
        if (vod_id != null) {
            stmt.bindString(1, vod_id);
        }
 
        String vod_name = entity.getVod_name();
        if (vod_name != null) {
            stmt.bindString(2, vod_name);
        }
 
        String vod_pic = entity.getVod_pic();
        if (vod_pic != null) {
            stmt.bindString(3, vod_pic);
        }
 
        String play_title = entity.getPlay_title();
        if (play_title != null) {
            stmt.bindString(4, play_title);
        }
 
        String play_url = entity.getPlay_url();
        if (play_url != null) {
            stmt.bindString(5, play_url);
        }
 
        String play_degree = entity.getPlay_degree();
        if (play_degree != null) {
            stmt.bindString(6, play_degree);
        }
 
        String nowtime = entity.getNowtime();
        if (nowtime != null) {
            stmt.bindString(7, nowtime);
        }
 
        String totaltime = entity.getTotaltime();
        if (totaltime != null) {
            stmt.bindString(8, totaltime);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public HistoryListBean readEntity(Cursor cursor, int offset) {
        HistoryListBean entity = new HistoryListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // vod_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // vod_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // vod_pic
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // play_title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // play_url
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // play_degree
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nowtime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // totaltime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HistoryListBean entity, int offset) {
        entity.setVod_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setVod_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVod_pic(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPlay_title(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPlay_url(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPlay_degree(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNowtime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTotaltime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(HistoryListBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(HistoryListBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(HistoryListBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
